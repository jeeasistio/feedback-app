generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Next Auth

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  AppUser       AppUser[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App

model AppUser {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  User         User       @relation(fields: [userId], references: [id])
  name         String
  image        String
  userId       String     @db.ObjectId
  username     String
  Comment      Comment[]
  ReplyFrom    Reply[]    @relation("ReplyFrom")
  ReplyTo      Reply[]    @relation("ReplyTo")
  FeedbackFrom Feedback[] @relation("FeedbackFrom")
  Upvote       Upvote[]
}

enum CategoryName {
  UI
  UX
  ENHANCEMENT
  BUG
  FEATURE
}

model Category {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  name     CategoryName
  label    String
  Feedback Feedback[]
}

enum StatusName {
  PLANNED
  IN_PROGRESS
  LIVE
}

model Status {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     StatusName
  label    String
  Feedback Feedback[]
}

model Feedback {
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  Category       Category  @relation(fields: [categoryId], references: [id])
  categoryId     String    @db.ObjectId
  Status         Status    @relation(fields: [statusId], references: [id])
  statusId       String    @db.ObjectId
  From           AppUser   @relation("FeedbackFrom", fields: [feedbackFromId], references: [id])
  feedbackFromId String    @db.ObjectId
  Upvote         Upvote[]
  Comment        Comment[]
}

model Upvote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  Feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feedbackId String   @db.ObjectId
  AppUser    AppUser  @relation(fields: [appUserId], references: [id])
  appUserId  String   @db.ObjectId

  @@unique([feedbackId, appUserId])
}

model Reply {
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  From        AppUser  @relation("ReplyFrom", fields: [replyFromId], references: [id])
  replyFromId String   @db.ObjectId
  To          AppUser  @relation("ReplyTo", fields: [replyToId], references: [id])
  replyToId   String   @db.ObjectId
  Comment     Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId   String   @db.ObjectId
}

model Comment {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  Feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feedbackId String   @db.ObjectId
  From       AppUser  @relation(fields: [appUserId], references: [id])
  appUserId  String   @db.ObjectId
  Replies    Reply[]
}
